(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{75:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return s})),n.d(a,"metadata",(function(){return l})),n.d(a,"toc",(function(){return r})),n.d(a,"default",(function(){return c}));var t=n(3),o=n(7),i=(n(0),n(88)),s={id:"options",title:"Formula Options",sidebar_label:"Formula Options"},l={unversionedId:"options",id:"options",isDocsHomePage:!1,title:"Formula Options",description:"Formula is zero-configuration - Out-of-the-box - using standard HTML5 validation properties to build up its validation",source:"@site/docs/options.md",slug:"/options",permalink:"/docs/options",version:"current",sidebar_label:"Formula Options",sidebar:"someSidebar",previous:{title:"The Formula API",permalink:"/docs/formula"},next:{title:"Formula Stores",permalink:"/docs/stores"}},r=[{value:"<code>locale</code>",id:"locale",children:[]},{value:"<code>validators</code>",id:"validators",children:[]},{value:"<code>formValidators</code>",id:"formvalidators",children:[]},{value:"Example",id:"example",children:[]}],d={toc:r};function c(e){var a=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},d,n,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Formula is zero-configuration - Out-of-the-box - using standard HTML5 validation properties to build up its validation\nrules - however it is also possible to pass custom validation rules via the ",Object(i.b)("inlineCode",{parentName:"p"},"formula()")," options object."),Object(i.b)("h3",{id:"locale"},Object(i.b)("inlineCode",{parentName:"h3"},"locale")),Object(i.b)("p",null,"Sets the locale of the form - currently only used in field index sorting for multi-value fields"),Object(i.b)("h3",{id:"validators"},Object(i.b)("inlineCode",{parentName:"h3"},"validators")),Object(i.b)("p",null,"An Object containing a key that is the field ",Object(i.b)("inlineCode",{parentName:"p"},"name")," to apply the validation to, the value is another object that\ncontains each named validation function. The result are made available in the ",Object(i.b)("inlineCode",{parentName:"p"},"validity")," store."),Object(i.b)("h3",{id:"formvalidators"},Object(i.b)("inlineCode",{parentName:"h3"},"formValidators")),Object(i.b)("p",null,"An Object containing a key that is the name of the validation rule, and the function that returns the validation result.\nThe results are available in the ",Object(i.b)("inlineCode",{parentName:"p"},"formValidity")," store"),Object(i.b)("p",null,"When using custom ",Object(i.b)("inlineCode",{parentName:"p"},"validators")),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"\n<script>\n  import { formula } from 'svelte-formula';\n  import { passwordStrength } from './libs/password.ts';\n\n  export let minPasswordStength = 85;\n\n  const { form, validity, formValidity } = formula({\n    locale: 'de',\n    validators: {\n      // Can provide multiple methods where the value can be checked\n      username: {\n        inDomain: (value) => value.include('@tinynodes.dev') ? null : 'You can only sign up with an account in the @tinynodes.dev domain'\n      },\n      // Methods can call functions to do other types of validations specific to your domain\n      password: {\n        isStrong: (value) => passwordStrength(value) >= minPasswordStength ? null : 'You must enter a stronger password'\n      },\n      // Methods also support multi-value fields where you can validation all values\n      invoices: {\n        isValidInvoiceId: (values) => values.every(value => value.includes('INV-')) ? null : `Incorrect invoice lines: ${values.map((value, index) => value.includes('INV-') ? (index + 1) : 0).join(', ')}`\n      }\n    },\n    formValidators: {\n      // With form validators you can compare values\n      passwordsMatch: (values) => values.password === values.passwordMatch ? null : 'Your passwords must match',\n      // Or check conditions between values across the form\n      didTickConfirm: (values) => Boolean(values.createAccount) && Boolean(values.agreeTandCs) ? null : 'You must agree to Terms & Conditions before creating an account'\n    }\n  });\n<\/script>\n\n\x3c!-- You can access the errors via the validity store - it contains both valid and invalid values, a message and an errors object with each error key --\x3e\n<div class:error={$validity?.username?.invalid} hidden='{$validity?.username?.valid}'>\n  {$validity?.username?.message}\n</div>\n\n\x3c!-- For form validity messages the key will either be null, or a truthy message --\x3e\n<div class:error={$formValidity?.passwordsMatch} hidden={$formValidity?.passwordsMatch}>\n  {$formValidity?.passwordsMatch}\n</div>\n")))}c.isMDXComponent=!0}}]);